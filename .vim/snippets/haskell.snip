snippet   module
alias     mod
abbr      module declaration
prev_word '^'
	module ${1:`expand("%:t:r")`} ${2:(${3\}) }where
	${0}

snippet   import
alias     imp
abbr      import
prev_word '^'
	import ${1}${2: (${3\})}

snippet   import_qualified
alias     impq
abbr      import qualified
prev_word '^'
	import qualified ${1} as ${2}

snippet decl
alias   func,var
abbr    func :: type; func pat = exp
	${1} :: ${2}
	$1 ${3} = ${4}

snippet let
abbr    let in
	let ${1}
	in  ${2}

snippet if
abbr    if then else
	if ${1}
		then ${2}
		else ${3}

snippet case_maybe
alias   casem
abbr    case maybe of
	case ${1} of
		Nothing -> ${2}
		Just ${3} -> ${4}

snippet case_either
alias   casee
abbr    case either of
	case ${1} of
		Left  ${2} -> ${3}
		Right ${4} -> ${5}
